// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'context/account/domain/account.dart';
import 'context/category/domain/category.dart';
import 'context/product/domain/product.dart';
import 'context/ticket/domain/ticket.dart';
import 'context/ticket/domain/ticket_product.dart';
import 'context/user/domain/user.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 2356645656901198505),
      name: 'Account',
      lastPropertyId: const IdUid(3, 8473866318010508319),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1844990175728263712),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3922137723301930508),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8473866318010508319),
            name: 'user',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4915120768988061007),
      name: 'Category',
      lastPropertyId: const IdUid(2, 2230844225615444419),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3600071282157550851),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2230844225615444419),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 7548037642491921496),
      name: 'Product',
      lastPropertyId: const IdUid(5, 2039045377243312289),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6085394731436469754),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2680262622497246882),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4444268409631938592),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4048306834725503054),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2039045377243312289),
            name: 'categoryId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 603565260999157038),
            relationTarget: 'Category')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 306034626984682291),
      name: 'Ticket',
      lastPropertyId: const IdUid(4, 6089227984837077974),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4769332115858019205),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3668351984599660263),
            name: 'dateTime',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6996319204519241871),
            name: 'total',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6089227984837077974),
            name: 'userId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 2319839189644621146),
            relationTarget: 'User')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 8375365180603973842),
      name: 'TicketProduct',
      lastPropertyId: const IdUid(3, 8336310975096199013),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2413394927127187577),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1102497468739219229),
            name: 'quantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8336310975096199013),
            name: 'productId',
            type: 11,
            flags: 520,
            indexId: const IdUid(3, 2596724746302244577),
            relationTarget: 'Product')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 5094587688369181389),
      name: 'User',
      lastPropertyId: const IdUid(5, 8336935614199164351),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 9113998322151407623),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4792376697774618183),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6351146659514931436),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 333859061224095027),
            name: 'role',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8336935614199164351),
            name: 'accountId',
            type: 11,
            flags: 520,
            indexId: const IdUid(4, 7049283831434798635),
            relationTarget: 'Account')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(6, 5094587688369181389),
      lastIndexId: const IdUid(4, 7049283831434798635),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Account: EntityDefinition<Account>(
        model: _entities[0],
        toOneRelations: (Account object) => [],
        toManyRelations: (Account object) => {},
        getId: (Account object) => object.id,
        setId: (Account object, int id) {
          object.id = id;
        },
        objectToFB: (Account object, fb.Builder fbb) {
          final passwordOffset = fbb.writeString(object.password);
          final userOffset = fbb.writeString(object.user);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, passwordOffset);
          fbb.addOffset(2, userOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Account(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              password: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              user: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        }),
    Category: EntityDefinition<Category>(
        model: _entities[1],
        toOneRelations: (Category object) => [],
        toManyRelations: (Category object) => {},
        getId: (Category object) => object.id,
        setId: (Category object, int id) {
          object.id = id;
        },
        objectToFB: (Category object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Category(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''));

          return object;
        }),
    Product: EntityDefinition<Product>(
        model: _entities[2],
        toOneRelations: (Product object) => [object.category],
        toManyRelations: (Product object) => {},
        getId: (Product object) => object.id,
        setId: (Product object, int id) {
          object.id = id;
        },
        objectToFB: (Product object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.addFloat64(3, object.price);
          fbb.addInt64(4, object.category.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Product(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              price: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 10, 0));
          object.category.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.category.attach(store);
          return object;
        }),
    Ticket: EntityDefinition<Ticket>(
        model: _entities[3],
        toOneRelations: (Ticket object) => [object.user],
        toManyRelations: (Ticket object) => {},
        getId: (Ticket object) => object.id,
        setId: (Ticket object, int id) {
          object.id = id;
        },
        objectToFB: (Ticket object, fb.Builder fbb) {
          fbb.startTable(5);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dateTime.millisecondsSinceEpoch);
          fbb.addFloat64(2, object.total);
          fbb.addInt64(3, object.user.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ticket(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              total:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..dateTime = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.user.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          object.user.attach(store);
          return object;
        }),
    TicketProduct: EntityDefinition<TicketProduct>(
        model: _entities[4],
        toOneRelations: (TicketProduct object) => [object.product],
        toManyRelations: (TicketProduct object) => {},
        getId: (TicketProduct object) => object.id,
        setId: (TicketProduct object, int id) {
          object.id = id;
        },
        objectToFB: (TicketProduct object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.quantity);
          fbb.addInt64(2, object.product.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TicketProduct(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              quantity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          object.product.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);
          object.product.attach(store);
          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[5],
        toOneRelations: (User object) => [object.account],
        toManyRelations: (User object) => {},
        getId: (User object) => object.id,
        setId: (User object, int id) {
          object.id = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          final roleOffset = fbb.writeString(object.role);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.addOffset(3, roleOffset);
          fbb.addInt64(4, object.account.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              email: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              role: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''));
          object.account.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.account.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// see [Account.id]
  static final id = QueryIntegerProperty<Account>(_entities[0].properties[0]);

  /// see [Account.password]
  static final password =
      QueryStringProperty<Account>(_entities[0].properties[1]);

  /// see [Account.user]
  static final user = QueryStringProperty<Account>(_entities[0].properties[2]);
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// see [Category.id]
  static final id = QueryIntegerProperty<Category>(_entities[1].properties[0]);

  /// see [Category.name]
  static final name = QueryStringProperty<Category>(_entities[1].properties[1]);
}

/// [Product] entity fields to define ObjectBox queries.
class Product_ {
  /// see [Product.id]
  static final id = QueryIntegerProperty<Product>(_entities[2].properties[0]);

  /// see [Product.name]
  static final name = QueryStringProperty<Product>(_entities[2].properties[1]);

  /// see [Product.description]
  static final description =
      QueryStringProperty<Product>(_entities[2].properties[2]);

  /// see [Product.price]
  static final price = QueryDoubleProperty<Product>(_entities[2].properties[3]);

  /// see [Product.category]
  static final category =
      QueryRelationToOne<Product, Category>(_entities[2].properties[4]);
}

/// [Ticket] entity fields to define ObjectBox queries.
class Ticket_ {
  /// see [Ticket.id]
  static final id = QueryIntegerProperty<Ticket>(_entities[3].properties[0]);

  /// see [Ticket.dateTime]
  static final dateTime =
      QueryIntegerProperty<Ticket>(_entities[3].properties[1]);

  /// see [Ticket.total]
  static final total = QueryDoubleProperty<Ticket>(_entities[3].properties[2]);

  /// see [Ticket.user]
  static final user =
      QueryRelationToOne<Ticket, User>(_entities[3].properties[3]);
}

/// [TicketProduct] entity fields to define ObjectBox queries.
class TicketProduct_ {
  /// see [TicketProduct.id]
  static final id =
      QueryIntegerProperty<TicketProduct>(_entities[4].properties[0]);

  /// see [TicketProduct.quantity]
  static final quantity =
      QueryIntegerProperty<TicketProduct>(_entities[4].properties[1]);

  /// see [TicketProduct.product]
  static final product =
      QueryRelationToOne<TicketProduct, Product>(_entities[4].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.id]
  static final id = QueryIntegerProperty<User>(_entities[5].properties[0]);

  /// see [User.name]
  static final name = QueryStringProperty<User>(_entities[5].properties[1]);

  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[5].properties[2]);

  /// see [User.role]
  static final role = QueryStringProperty<User>(_entities[5].properties[3]);

  /// see [User.account]
  static final account =
      QueryRelationToOne<User, Account>(_entities[5].properties[4]);
}
